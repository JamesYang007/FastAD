# Project Configuration

# C++ Project
language: cpp

dist: trusty
sudo: required

# Build Job Matrix

jobs:
    include:

        # Valgrind
        - os: linux
          compiler: gcc
          addons:
              apt:
                  sources: ['ubuntu-toolchain-r-test']
                  packages: ['g++-7', 'cmake', 'ninja-build', 'valgrind']
          env:
              - COMPILER="g++-7"
              - CTEST_OPTIONS="-T memcheck"
              - VALGRIND="ON"

        # Coveralls
        - os: linux
          compiler: gcc
          addons:
              apt:
                  sources: ['ubuntu-toolchain-r-test']
                  packages: ['g++-7', 'cmake', 'ninja-build']
          before_install:
              - pip install --user cpp-coveralls
          after_success:
              - coveralls --build-root . --include include --gcov 'gcov-7' --gcov-options '\-lp'
          env:
              - COMPILER="g++-7"
              - CMAKE_OPTIONS="-DCOVERAGE=ON"

        # OSX / Clang

        - os: osx
          osx_image: xcode10

        - os: osx
          osx_image: xcode10.1

        - os: osx
          osx_image: xcode10.2

        - os: osx
          osx_image: xcode11.2

        # Linux/GCC>=5

        - os: linux
          compiler: gcc
          env: COMPILER=g++-7
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-7', 'ninja-build']

        - os: linux
          compiler: gcc
          env: COMPILER=g++-8
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-8', 'ninja-build']

        - os: linux
          compiler: gcc
          env: COMPILER=g++-9
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-9', 'ninja-build']

# Build Script

script:

    # MacOS only: install ninja and cmake
    - if [[ (-x $(which brew)) ]]; then
       brew update;
       brew install cmake ninja;
       brew upgrade cmake;
      fi

    # set CXX to correct compiler
    - if [[ "${COMPILER}" != "" ]]; then
        export CXX=${COMPILER};
      fi 

    # show OS/compiler/cmake version
    - uname -a
    - ${CXX} --version
    - cmake --version

    # setup, clean build, and test
    - ./setup.sh
    - mkdir -p build && cd build
    - mkdir -p debug && cd debug
    - cmake ../../ -GNinja ${CMAKE_OPTIONS} && cmake --build .
    - ctest ${CTEST_OPTIONS} -j12

    # if testing valgrind
    - if [[ "${VALGRIND}" == "ON" ]]; then
        cat ./Testing/Temporary/MemoryChecker.*.log;
      fi
    - cd ../../
